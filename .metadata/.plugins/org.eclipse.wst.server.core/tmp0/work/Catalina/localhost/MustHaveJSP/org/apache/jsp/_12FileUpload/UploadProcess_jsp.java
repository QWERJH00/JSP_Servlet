/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-22 03:46:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._12FileUpload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import fileupload.MyfileDAO;
import fileupload.MyfileDTO;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;
import com.oreilly.servlet.MultipartRequest;

public final class UploadProcess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("fileupload.MyfileDAO");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("fileupload.MyfileDTO");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

/*
	파일업로드를 위한 디렉토리의 물리적 경로(절대경로)를 얻어온다.
	물리적 경로가 필요한 이유는 운영체제에 따라 경로를 표현하는 방식이
	다르기 때문이다.
*/
String saveDirectory = application.getRealPath("/Uploads");
// 업로드할 파일의 최대용량제한(1MB)로 지정한다.
int maxPostSize = 1024 * 1000;
// 인코딩 방식 지정
String encoding = "UTF-8";

try {
	/*
		앞에서 준비한 3개의 인수와 request내장객체까지를 이용해서
		MultipartRequest객체를 생성한다. 해당객체가 정상적으로 생성되면
		파일업로드는 완료된다.
	*/
	MultipartRequest mr = new MultipartRequest(request, saveDirectory,
												maxPostSize, encoding);
	
	// mr객체를 통해 서버에 저장된 파일명을 가져온다.
	String fileName = mr.getFilesystemName("attachedFile");
	/*
		파일명에서 앞의 .(닷)을 찾아 인덱스를 확인한 후 확장자를 잘라낸다.
		확장자는 파일의 용도를 나타내는 부분이므로 중요하다.
		파일명에 .(닷)을 여러개 사용할 수 있으므로 끝에서부터 찾는다.
	*/
	String ext = fileName.substring(fileName.lastIndexOf("."));
	// 현재날짜와 시간 및 밀리세컨즈까지 이용해서 파일명으로 사용할 문자열을
	// 만든다.
	String now = new SimpleDateFormat("yyyyMMdd_HmsS").format(new Date());
	// 확장자와 파일명을 합쳐서 서버에 저장할 파일명을 만들어준다.
	String newFileName = now + ext;
	
	/*
		서버에 저장된 파일의 파일명을 새로운 파일명으로 변경해준다.
		여기서 사용된 separator는 경로를 표시할때 사용하는 구분기호로
		윈도우의 경우 \(역슬래시), 리눅스의 경우 /(슬래시)를 자동으로
		부여해준다. File객체를 각각 생성한 후 renameTo()메서드를 통해서
		변경한다.
	*/
	File oldFile = new File(saveDirectory + File.separator + fileName);
	File newFile = new File(saveDirectory + File.separator + newFileName);
	oldFile.renameTo(newFile);
	
	/*
		파일을 제외한 나머지 폼값을 받는다. 단 이때 request내장객체를 
		통해서가 아니라 mr객체를 통해 받아야 하므로 주의해야한다.
		객체는 다르지만 폼값을 받기위해 메서드명은 동일하다.
	*/
	String name = mr.getParameter("name");
	String title = mr.getParameter("title");
	String[] cateArray = mr.getParameterValues("cate");
	StringBuffer cateBuf = new StringBuffer();
	if (cateArray == null) {
		cateBuf.append("선택 없음");
	}
	else {
		// 체크한 항목의 갯수만큼 반복하여 StringBuffer에 추가한다.
		for (String s : cateArray){
			cateBuf.append(s + ", ");
		}
	}
	
	// DTO 생성 및 폼값을 세팅한다.
	MyfileDTO dto = new MyfileDTO();
	dto.setName(name);
	dto.setTitle(title);
	// 입력전 StringBuffer객체를 String으로 변환해준다.
	dto.setCate(cateBuf.toString());
	dto.setOfile(fileName);
	dto.setSfile(newFileName);
	
	// DAO를 통해 데이터베이스에 입력한다.
	MyfileDAO dao = new MyfileDAO();
	dao.insertFile(dto);
	// 자원반납(커넥션풀에 Connection객체를 반납한다.)
	dao.close();
	
	// 파일업로드에 성공한 경우 파일목록으로 이동한다.
	response.sendRedirect("FileList.jsp");
}
catch (Exception e) {
	/*
		파일업로드에 실패한 경우에는 request영역에 에러메세지를
		저장한 후 업로드폼으로 포워드한다.
	*/
	e.printStackTrace();
	request.setAttribute("errorMessage", "파일 업로드 오류");
	request.getRequestDispatcher("FileUploacMain.jsp")
		.forward(request, response);
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
